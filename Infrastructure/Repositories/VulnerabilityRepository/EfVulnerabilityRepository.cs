using Microsoft.AspNetCore.Components.Forms;
using Microsoft.EntityFrameworkCore;
using Presentation.Domain.Entities.VulnerabilityEntities;
using Presentation.Domain.Interfaces;
using WebSecProbeCleanArch.Infrastructure.DbContexts;

namespace WebSecProbeCleanArch.Infrastructure.Repositories.VulnerabilityRepository
{
    public class EfVulnerabilityRepository : IVulnerabilityRepository
    {
        private readonly IDbContextFactory<SqliteDbContext> _dbContextFactory;

        public EfVulnerabilityRepository(IDbContextFactory<SqliteDbContext> dbContextFactory)
        {
            _dbContextFactory = dbContextFactory;
        }

        public async Task<int> CreateAsync(Vulnerability vulnerability)
        {
            using (var context = _dbContextFactory.CreateDbContext())
            {
                await context.Vulnerabilities.AddAsync(vulnerability);
                await context.SaveChangesAsync();

                return context.Vulnerabilities
                    .OrderByDescending(v => v.Id)
                    .FirstOrDefaultAsync()
                    .Id;
            }
        }

        public async Task<bool> DeleteAsync(int id)
        {
            using (var context = _dbContextFactory.CreateDbContext())
            {
                var entityToDelete = await context.Vulnerabilities.FindAsync(id);
                
                if (entityToDelete == null)
                {
                    return false;
                }

                context.Vulnerabilities.Remove(entityToDelete);
                
                await context.SaveChangesAsync();

                return true;
            }
        }

        public async Task<List<Vulnerability>> GetAllAsync()
        {
            using (var context = _dbContextFactory.CreateDbContext())
            {
                var vulnerabilities = await context.Vulnerabilities.ToListAsync();
                return vulnerabilities;
            }
        }

        public async Task<Vulnerability?> GetAsync(int id)
        {
            using (var context = _dbContextFactory.CreateDbContext())
            {
                Vulnerability? vulnerability = await context.Vulnerabilities.SingleOrDefaultAsync(v => v.Id == id);

                return vulnerability == null ? throw new Exception($"Vulnerability with ID {id} not found.") : vulnerability;
            }
        }

        public Task<int> UpdateAsync(Vulnerability vulnerability)
        {
            throw new NotImplementedException();
        }
    }
}
