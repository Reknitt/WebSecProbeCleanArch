using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Presentation.Domain.Entities.VulnerabilityEntities;
using WebSecProbeCleanArch.Application.Commands.VulnerabilityCommands;
using WebSecProbeCleanArch.Application.Queries.VulnerabilityQueries;

namespace WebSecProbeCleanArch.Infrastructure.Controllers.VulnerabilityController
{
    [Route("api/[controller]")]
    [ApiController]
    public class VulnerabilityController : ControllerBase
    {
        private readonly IMediator _mediator;

        public VulnerabilityController(IMediator mediator)
        {
            _mediator = mediator;
        }


        [HttpPost]
        public async Task<IActionResult> CreateVulnerability([FromBody] CreateVulnerabilityCommand createVulnerability, CancellationToken token)
        {
            int vulnerabilityId = await _mediator.Send(createVulnerability, token);
            return Ok(vulnerabilityId);
        }

        [HttpGet("ById")]
        public async Task<IActionResult> GetVulnerbilityById([FromQuery] VulnerabilityQueryById queryById, CancellationToken token)
        {
            try
            {
                var vulnerability = await _mediator.Send(queryById, token);
                return Ok(vulnerability);
            }
            catch
            {
                return NotFound($"Vulnerability with ID {queryById.Id} not found");
            }
        }

        [HttpGet("All")]
        public async Task<List<Vulnerability>> GetAllVulnerabilities([FromQuery] GetAllVulnerabilitiesQuery getAllVulnerabilities, CancellationToken token)
        {
            return await _mediator.Send(getAllVulnerabilities, token);
        }

        [HttpDelete]
        public async Task<bool> DeleteVulnerabilityById([FromQuery] DeleteVulnerabilityByIdCommand deleteVulnerabilityById, CancellationToken token)
        {
            return await _mediator.Send(deleteVulnerabilityById);
        }

    }
}
